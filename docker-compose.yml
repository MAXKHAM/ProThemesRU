
version: '3.8'

services:
  # База данных PostgreSQL
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: prothemesru
      POSTGRES_USER: prothemesru
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - prothemesru_network

  # Redis для кэширования и очередей
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - prothemesru_network

  # Основное приложение
  backend:
    build: .
    environment:
      - DATABASE_URL=postgresql://prothemesru:${POSTGRES_PASSWORD:-password}@db:5432/prothemesru
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_ADMIN_ID=${TELEGRAM_ADMIN_ID}
      - STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./static:/app/static
    ports:
      - "5000:5000"
    depends_on:
      - db
      - redis
    networks:
      - prothemesru_network
    restart: unless-stopped

  # Celery worker для фоновых задач
  celery_worker:
    build: .
    command: celery -A app.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://prothemesru:${POSTGRES_PASSWORD:-password}@db:5432/prothemesru
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - prothemesru_network
    restart: unless-stopped

  # Celery beat для периодических задач
  celery_beat:
    build: .
    command: celery -A app.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://prothemesru:${POSTGRES_PASSWORD:-password}@db:5432/prothemesru
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis:6379/0
    volumes:
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - prothemesru_network
    restart: unless-stopped

  # Telegram бот
  telegram_bot:
    build: .
    command: python telegram_bot/bot.py
    environment:
      - DATABASE_URL=postgresql://prothemesru:${POSTGRES_PASSWORD:-password}@db:5432/prothemesru
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_ADMIN_ID=${TELEGRAM_ADMIN_ID}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - db
    networks:
      - prothemesru_network
    restart: unless-stopped

  # Nginx для проксирования
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - backend
    networks:
      - prothemesru_network
    restart: unless-stopped

  # Мониторинг с Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - prothemesru_network
    restart: unless-stopped

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - prothemesru_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  prothemesru_network:
    driver: bridge
