#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ ProThemes
"""

import sys
import os
import unittest
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
root_dir = Path(__file__).parent
sys.path.insert(0, str(root_dir))

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ProThemes...")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    test_dir = root_dir / 'tests'
    test_files = []
    
    if test_dir.exists():
        for file in test_dir.rglob('test_*.py'):
            test_files.append(str(file.relative_to(root_dir)).replace('/', '.').replace('.py', ''))
    
    if not test_files:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(test_files)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    for test_file in test_files:
        try:
            tests = loader.loadTestsFromName(test_file)
            suite.addTests(tests)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {test_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {test_file}: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –û—à–∏–±–∫–∏: {len(result.errors)}")
    print(f"‚ö†Ô∏è  –ü—Ä–æ–≤–∞–ª—ã: {len(result.failures)}")
    print(f"üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.testsRun} —Ç–µ—Å—Ç–æ–≤")
    
    if result.failures:
        print("\nüîç –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:")
        for test, traceback in result.failures:
            print(f"‚ùå {test}: {traceback.split('AssertionError:')[-1].strip()}")
    
    if result.errors:
        print("\nüö® –û–®–ò–ë–ö–ò –í –¢–ï–°–¢–ê–•:")
        for test, traceback in result.errors:
            print(f"üí• {test}: {traceback.split('Exception:')[-1].strip()}")
    
    return len(result.failures) == 0 and len(result.errors) == 0

def run_coverage():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"""
    try:
        import coverage
        print("üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º coverage
        cov = coverage.Coverage()
        cov.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        success = run_tests()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º coverage
        cov.stop()
        cov.save()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        print("\nüìà –û–¢–ß–ï–¢ –û –ü–û–ö–†–´–¢–ò–ò –ö–û–î–ê:")
        cov.report()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –æ—Ç—á–µ—Ç
        cov.html_report(directory='htmlcov')
        print("üìÅ HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ htmlcov/")
        
        return success
        
    except ImportError:
        print("‚ùå coverage –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install coverage")
        return run_tests()

def run_specific_test(test_name):
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print(f"üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
    
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromName(test_name)
    
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    return len(result.failures) == 0 and len(result.errors) == 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == 'coverage':
            success = run_coverage()
        elif command == 'test':
            test_name = sys.argv[2] if len(sys.argv) > 2 else None
            if test_name:
                success = run_specific_test(test_name)
            else:
                success = run_tests()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: test, coverage")
            return False
    else:
        success = run_tests()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
