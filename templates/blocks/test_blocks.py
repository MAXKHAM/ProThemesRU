#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–∫–æ–≤ ProThemesRU
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from site_blocks import (
    all_blocks, 
    get_blocks_by_category, 
    get_block_by_id, 
    search_blocks,
    get_all_categories,
    get_blocks_count
)
from site_blocks.constructor import constructor
from site_blocks.export import export_all_formats

def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ===")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤
    total_blocks = len(all_blocks)
    print(f"–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: {total_blocks}")
    assert total_blocks > 0, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –±–ª–æ–∫–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = get_all_categories()
    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}")
    assert len(categories) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    counts = get_blocks_count()
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {counts}")
    
    print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç\n")

def test_block_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–ª–æ–∫–∞–º–∏"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–ª–æ–∫–∞–º–∏ ===")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø–æ ID
    header_block = get_block_by_id('header')
    assert header_block is not None, "–ë–ª–æ–∫ header –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    print(f"–ù–∞–π–¥–µ–Ω –±–ª–æ–∫: {header_block['name']}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    basic_blocks = get_blocks_by_category('basic')
    assert len(basic_blocks) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–∞–∑–æ–≤—ã–µ –±–ª–æ–∫–∏"
    print(f"–ë–∞–∑–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤: {len(basic_blocks)}")
    
    # –ü–æ–∏—Å–∫ –±–ª–æ–∫–æ–≤
    found_blocks = search_blocks('—Ñ–æ—Ä–º–∞')
    print(f"–ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ —Å '—Ñ–æ—Ä–º–∞': {len(found_blocks)}")
    
    print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–ª–æ–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç\n")

def test_constructor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ ===")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    constructor.current_page_blocks = []
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤
    header = constructor.add_block_to_page('header')
    hero = constructor.add_block_to_page('hero_section')
    footer = constructor.add_block_to_page('footer')
    
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –±–ª–æ–∫–æ–≤: {len(constructor.current_page_blocks)}")
    assert len(constructor.current_page_blocks) == 3, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –±–ª–æ–∫–∞"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤
    constructor.update_block_property(hero['id'], 'title', '–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫')
    
    # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞
    constructor.move_block(hero['id'], 0)
    
    # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
    duplicated = constructor.duplicate_block(header['id'])
    assert duplicated is not None, "–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML
    html = constructor.get_page_html()
    assert '<html' in html, "HTML –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–≥ html"
    assert len(html) > 100, "HTML –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç—ã–º"
    
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω HTML –¥–ª–∏–Ω–æ–π: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    structure = constructor.get_page_structure()
    assert len(structure) > 0, "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç–æ–π"
    
    print("‚úÖ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç\n")

def test_export_import():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ ===")
    
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç
        files = export_all_formats('test_exports')
        print(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        assert len(files) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∞–π–ª—ã"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        for file_path in files:
            assert os.path.exists(file_path), f"–§–∞–π–ª {file_path} –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        
        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n")

def test_custom_blocks():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±–ª–æ–∫–æ–≤"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±–ª–æ–∫–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–ª–æ–∫–∞
    custom_block = {
        "name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫",
        "category": "content",
        "html": "<div class='custom-block'><h2>{title}</h2><p>{content}</p></div>",
        "css": ".custom-block { padding: 20px; background: #f0f0f0; border-radius: 5px; }",
        "properties": ["title", "content", "background"]
    }
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É
    from site_blocks.content import content_blocks
    content_blocks["custom_block"] = custom_block
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –±–ª–æ–∫–æ–≤
    from site_blocks import all_blocks
    all_blocks["custom_block"] = custom_block
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    found_block = get_block_by_id('custom_block')
    assert found_block is not None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω"
    print(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫: {found_block['name']}")
    
    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±–ª–æ–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç\n")

def test_error_handling():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫
    non_existent = get_block_by_id('non_existent_block')
    assert non_existent is None, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None"
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    empty_category = get_blocks_by_category('non_existent_category')
    assert len(empty_category) == 0, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
    
    # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    try:
        constructor.add_block_to_page('non_existent_block')
        assert False, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª–æ–∫–∞"
    except ValueError:
        print("‚úÖ –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç\n")

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–∫–æ–≤ ProThemesRU\n")
    
    try:
        test_basic_functionality()
        test_block_operations()
        test_constructor()
        test_export_import()
        test_custom_blocks()
        test_error_handling()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1) 