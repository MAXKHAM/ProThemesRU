#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è ProThemesRU
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞–º–∏
"""

import os
import logging
import requests
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
API_BASE_URL = os.environ.get('API_BASE_URL', 'https://your-real-url-here.com')

class ProThemesRUBot:
    def __init__(self):
        self.api_url = API_BASE_URL
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ProThemesRU, {user.first_name}!

üöÄ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã –ø—Ä—è–º–æ –≤ Telegram!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/templates - –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω
/my_sites - –ú–æ–∏ —Å–∞–π—Ç—ã
/help - –ü–æ–º–æ—â—å
        """
        
        keyboard = [
            [InlineKeyboardButton("üèóÔ∏è –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç", callback_data="create_site")],
            [InlineKeyboardButton("üìã –®–∞–±–ª–æ–Ω—ã", callback_data="templates")],
            [InlineKeyboardButton("üë§ –ú–æ–∏ —Å–∞–π—Ç—ã", callback_data="my_sites")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é ProThemesRU Bot

üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /templates - –ü—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–æ–≤
‚Ä¢ /my_sites - –í–∞—à–∏ —Å–∞–π—Ç—ã
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞:
1. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç"
2. –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
4. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç!

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
‚Ä¢ –í—Å–µ —Å–∞–π—Ç—ã –∞–¥–∞–ø—Ç–∏–≤–Ω—ã –∏ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —á–∞—Ç–µ
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_text, reply_markup=reply_markup)
    
    async def templates_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /templates"""
        await self.show_templates(update, context)
    
    async def my_sites_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_sites"""
        await self.show_my_sites(update, context)
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "start":
            await self.start(update, context)
        elif query.data == "create_site":
            await self.create_site_menu(update, context)
        elif query.data == "templates":
            await self.show_templates(update, context)
        elif query.data == "my_sites":
            await self.show_my_sites(update, context)
        elif query.data == "help":
            await self.help_command(update, context)
        elif query.data.startswith("template_"):
            template_id = query.data.split("_")[1]
            await self.select_template(update, context, template_id)
    
    async def show_templates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
        try:
            response = requests.get(f"{self.api_url}/api/templates")
            if response.status_code == 200:
                templates = response.json().get('templates', [])
                
                if not templates:
                    text = "üìã –®–∞–±–ª–æ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await self.send_or_edit_message(update, context, text, reply_markup)
                    return
                
                text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:\n\n"
                keyboard = []
                
                for template in templates[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    text += f"üé® {template['name']}\n"
                    text += f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template['category']}\n"
                    text += f"   –¶–µ–Ω–∞: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if template['price'] == 0 else f'${template['price']}'}\n\n"
                    
                    keyboard.append([
                        InlineKeyboardButton(
                            f"–í—ã–±—Ä–∞—Ç—å {template['name']}", 
                            callback_data=f"template_{template['id']}"
                        )
                    ])
                
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await self.send_or_edit_message(update, context, text, reply_markup)
            else:
                await self.send_error_message(update, context, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            await self.send_error_message(update, context, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
    
    async def create_site_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞"""
        text = """
üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è:

1Ô∏è‚É£ –®–∞–±–ª–æ–Ω - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –≥–æ—Ç–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
2Ô∏è‚É£ –° –Ω—É–ª—è - –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞
3Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç - –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∞–π—Ç
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="templates")],
            [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å —Å –Ω—É–ª—è", callback_data="create_from_scratch")],
            [InlineKeyboardButton("üì§ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="import_site")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.send_or_edit_message(update, context, text, reply_markup)
    
    async def select_template(self, update: Update, context: ContextTypes.DEFAULT_TYPE, template_id):
        """–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞"""
        try:
            response = requests.get(f"{self.api_url}/api/templates/{template_id}")
            if response.status_code == 200:
                template = response.json().get('template', {})
                
                text = f"""
üé® –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {template['name']}

üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template['category']}
‚Ä¢ –¶–µ–Ω–∞: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if template['price'] == 0 else f'${template['price']}'}
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {template['rating']}/5
‚Ä¢ –ó–∞–≥—Ä—É–∑–æ–∫: {template['downloads']}

‚úÖ –ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞?
                """
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç", callback_data=f"create_from_template_{template_id}")],
                    [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data="templates")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await self.send_or_edit_message(update, context, text, reply_markup)
            else:
                await self.send_error_message(update, context, "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —à–∞–±–ª–æ–Ω–∞: {e}")
            await self.send_error_message(update, context, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞")
    
    async def show_my_sites(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        text = """
üë§ –ú–æ–∏ —Å–∞–π—Ç—ã

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö —Å–∞–π—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.

üîê –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:
https://your-real-url-here.com/login

–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö
‚Ä¢ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        
        keyboard = [
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", url="https://your-real-url-here.com")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.send_or_edit_message(update, context, text, reply_markup)
    
    async def send_or_edit_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        query = update.callback_query
        if query:
            await query.edit_message_text(text=text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text=text, reply_markup=reply_markup)
    
    async def send_error_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, error_text: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        text = f"‚ùå {error_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.send_or_edit_message(update, context, text, reply_markup)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
    bot = ProThemesRUBot()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("templates", bot.templates_command))
    application.add_handler(CommandHandler("my_sites", bot.my_sites_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(bot.button_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ ProThemesRU Telegram –±–æ—Ç–∞...")
    application.run_polling()

if __name__ == '__main__':
    main() 