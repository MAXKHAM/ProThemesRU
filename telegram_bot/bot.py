import os
import logging
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)
from dotenv import load_dotenv
import requests
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_ACTION, TEMPLATES, CUSTOMIZATION, ORDER = range(4)

# –ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
MAIN_MENU = [
    [
        InlineKeyboardButton("üìö –®–∞–±–ª–æ–Ω—ã", callback_data='templates'),
        InlineKeyboardButton("üé® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", callback_data='customization'),
    ],
    [
        InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data='order'),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help'),
    ],
]

# API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:5000')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥")
    
    reply_markup = InlineKeyboardMarkup(MAIN_MENU)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üåü\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return SELECTING_ACTION

async def show_templates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    try:
        response = requests.get(f'{API_BASE_URL}/api/templates')
        templates = response.json()['templates']
        
        for template in templates[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —à–∞–±–ª–æ–Ω–æ–≤
            keyboard = [
                [
                    InlineKeyboardButton("–ò–∑—É—á–∏—Ç—å", callback_data=f'template_{template.id}'),
                    InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f'select_{template.id}'),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_photo(
                photo=template.preview_image,
                caption=f"{template.name}\n"
                       f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template.category}\n"
                       f"–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(template.features)}",
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤")
    
    return TEMPLATES

async def customize_template(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∞–π—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫", callback_data='add_block'),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–∞", callback_data='change_colors'),
        ],
        [
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é", callback_data='add_animation'),
            InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —à—Ä–∏—Ñ—Ç—ã", callback_data='set_fonts'),
        ],
        [
            InlineKeyboardButton("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data='preview'),
            InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back'),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞:",
        reply_markup=reply_markup
    )
    return CUSTOMIZATION

async def order_website(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–∫–∞–∑ —Å–∞–π—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("–ë–∞–∑–æ–≤—ã–π", callback_data='basic'),
            InlineKeyboardButton("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", callback_data='pro'),
        ],
        [
            InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º", callback_data='premium'),
            InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back'),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:",
        reply_markup=reply_markup
    )
    return ORDER

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–º–æ—â—å"""
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞:\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã\n"
        "3. –ó–∞–∫–∞–∂–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É"
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(msg="–û—à–∏–±–∫–∞:", exc_info=context.error)
    
    if isinstance(update, Update):
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECTING_ACTION: [
                CallbackQueryHandler(show_templates, pattern='^templates$'),
                CallbackQueryHandler(customize_template, pattern='^customization$'),
                CallbackQueryHandler(order_website, pattern='^order$'),
                CallbackQueryHandler(help_command, pattern='^help$'),
            ],
            TEMPLATES: [
                CallbackQueryHandler(show_templates, pattern='^templates$'),
                CallbackQueryHandler(start, pattern='^back$'),
            ],
            CUSTOMIZATION: [
                CallbackQueryHandler(customize_template, pattern='^customization$'),
                CallbackQueryHandler(start, pattern='^back$'),
            ],
            ORDER: [
                CallbackQueryHandler(order_website, pattern='^order$'),
                CallbackQueryHandler(start, pattern='^back$'),
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )
    
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()