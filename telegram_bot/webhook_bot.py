#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è ProThemesRU —Å webhook –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
–î–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Vercel
"""

import os
import logging
import requests
import json
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
API_BASE_URL = os.environ.get('API_BASE_URL', 'https://prothemesru.vercel.app')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', 'https://your-bot-domain.vercel.app/webhook')

class ProThemesRUBot:
    def __init__(self):
        self.api_url = API_BASE_URL
        logger.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å API URL: {self.api_url}")
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ProThemesRU, {user.first_name}!

üöÄ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã –ø—Ä—è–º–æ –≤ Telegram!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/templates - –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω
/my_sites - –ú–æ–∏ —Å–∞–π—Ç—ã
/help - –ü–æ–º–æ—â—å
        """
        
        keyboard = [
            [InlineKeyboardButton("üèóÔ∏è –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç", callback_data="create_site")],
            [InlineKeyboardButton("üìã –®–∞–±–ª–æ–Ω—ã", callback_data="templates")],
            [InlineKeyboardButton("üë§ –ú–æ–∏ —Å–∞–π—Ç—ã", callback_data="my_sites")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é ProThemesRU Bot

üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /templates - –ü—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–æ–≤
‚Ä¢ /my_sites - –í–∞—à–∏ —Å–∞–π—Ç—ã
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞:
1. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç"
2. –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
4. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç!

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
‚Ä¢ –í—Å–µ —Å–∞–π—Ç—ã –∞–¥–∞–ø—Ç–∏–≤–Ω—ã –∏ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —á–∞—Ç–µ

üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: https://prothemesru.vercel.app
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_text, reply_markup=reply_markup)
    
    async def templates_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /templates"""
        await self.show_templates(update, context)
    
    async def my_sites_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_sites"""
        await self.show_my_sites(update, context)
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "start":
            await self.start(update, context)
        elif query.data == "create_site":
            await self.create_site_menu(update, context)
        elif query.data == "templates":
            await self.show_templates(update, context)
        elif query.data == "my_sites":
            await self.show_my_sites(update, context)
        elif query.data == "help":
            await self.help_command(update, context)
        elif query.data.startswith("template_"):
            template_id = query.data.split("_")[1]
            await self.select_template(update, context, template_id)
        elif query.data == "create_from_scratch":
            await self.create_from_scratch(update, context)
        elif query.data == "import_site":
            await self.import_site(update, context)
        elif query.data.startswith("create_from_template_"):
            template_id = query.data.split("_")[3]
            await self.create_from_template(update, context, template_id)
    
    async def show_templates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
        try:
            logger.info(f"–ó–∞–ø—Ä–æ—Å —à–∞–±–ª–æ–Ω–æ–≤ —Å API: {self.api_url}/api/templates")
            response = requests.get(f"{self.api_url}/api/templates", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                templates = data.get('templates', [])
                
                if not templates:
                    # Fallback templates –µ—Å–ª–∏ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
                    templates = [
                        {
                            'id': 1,
                            'name': '–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π –±–∏–∑–Ω–µ—Å',
                            'category': 'business',
                            'price': 5000,
                            'rating': 4.9,
                            'downloads': 150
                        },
                        {
                            'id': 2,
                            'name': '–ó–æ–ª–æ—Ç–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
                            'category': 'portfolio',
                            'price': 3000,
                            'rating': 4.8,
                            'downloads': 89
                        },
                        {
                            'id': 3,
                            'name': '–ü—Ä–µ–º–∏—É–º –º–∞–≥–∞–∑–∏–Ω',
                            'category': 'ecommerce',
                            'price': 8000,
                            'rating': 4.7,
                            'downloads': 234
                        }
                    ]
                
                text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:\n\n"
                keyboard = []
                
                for template in templates[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    text += f"üé® {template['name']}\n"
                    text += f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template['category']}\n"
                    text += f"   –¶–µ–Ω–∞: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if template.get('price', 0) == 0 else f'{template.get('price', 0)} ‚ÇΩ'}\n"
                    text += f"   –†–µ–π—Ç–∏–Ω–≥: {template.get('rating', 0)}/5 ‚≠ê\n\n"
                    
                    keyboard.append([
                        InlineKeyboardButton(
                            f"–í—ã–±—Ä–∞—Ç—å {template['name']}", 
                            callback_data=f"template_{template['id']}"
                        )
                    ])
                
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await self.send_or_edit_message(update, context, text, reply_markup)
            else:
                logger.error(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                await self.send_error_message(update, context, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤")
                
        except requests.exceptions.Timeout:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
            await self.send_error_message(update, context, "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            await self.send_error_message(update, context, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await self.send_error_message(update, context, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def create_site_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞"""
        text = """
üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è:

1Ô∏è‚É£ –®–∞–±–ª–æ–Ω - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –≥–æ—Ç–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
2Ô∏è‚É£ –° –Ω—É–ª—è - –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞
3Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç - –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∞–π—Ç
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="templates")],
            [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å —Å –Ω—É–ª—è", callback_data="create_from_scratch")],
            [InlineKeyboardButton("üì§ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="import_site")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.send_or_edit_message(update, context, text, reply_markup)
    
    async def create_from_scratch(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ —Å –Ω—É–ª—è"""
        text = """
üé® –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ —Å –Ω—É–ª—è

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞ —Å –Ω—É–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:

üåê https://prothemesru.vercel.app

–¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ:
‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
‚Ä¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
        """
        
        keyboard = [
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", url="https://prothemesru.vercel.app")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="create_site")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.send_or_edit_message(update, context, text, reply_markup)
    
    async def import_site(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∞–π—Ç–∞"""
        text = """
üì§ –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∞–π—Ç–∞

–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å–∞–π—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:

üìß support@prothemesru.com
üì± @ProThemesRU_Bot

–ú—ã –ø–æ–º–æ–∂–µ–º –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤–∞—à —Å–∞–π—Ç –Ω–∞ –Ω–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!
        """
        
        keyboard = [
            [InlineKeyboardButton("üìß –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/ProThemesRU_Bot")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="create_site")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.send_or_edit_message(update, context, text, reply_markup)
    
    async def select_template(self, update: Update, context: ContextTypes.DEFAULT_TYPE, template_id):
        """–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞"""
        try:
            response = requests.get(f"{self.api_url}/api/templates/{template_id}", timeout=10)
            if response.status_code == 200:
                template = response.json().get('template', {})
            else:
                # Fallback template
                template = {
                    'id': template_id,
                    'name': f'–®–∞–±–ª–æ–Ω #{template_id}',
                    'category': 'business',
                    'price': 5000,
                    'rating': 4.8,
                    'downloads': 100
                }
            
            text = f"""
üé® –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {template['name']}

üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template['category']}
‚Ä¢ –¶–µ–Ω–∞: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if template.get('price', 0) == 0 else f'{template.get('price', 0)} ‚ÇΩ'}
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {template.get('rating', 0)}/5 ‚≠ê
‚Ä¢ –ó–∞–≥—Ä—É–∑–æ–∫: {template.get('downloads', 0)}

‚úÖ –ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞?
            """
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç", callback_data=f"create_from_template_{template_id}")],
                [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data="templates")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.send_or_edit_message(update, context, text, reply_markup)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —à–∞–±–ª–æ–Ω–∞: {e}")
            await self.send_error_message(update, context, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞")
    
    async def create_from_template(self, update: Update, context: ContextTypes.DEFAULT_TYPE, template_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"""
        text = f"""
üéâ –û—Ç–ª–∏—á–Ω–æ! –°–æ–∑–¥–∞–µ–º —Å–∞–π—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ #{template_id}

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞:

1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω
3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç
4Ô∏è‚É£ –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å–∞–π—Ç

üåê https://prothemesru.vercel.app

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ü–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @ProThemesRU_Bot
        """
        
        keyboard = [
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", url="https://prothemesru.vercel.app")],
            [InlineKeyboardButton("üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/ProThemesRU_Bot")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.send_or_edit_message(update, context, text, reply_markup)
    
    async def show_my_sites(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        text = """
üë§ –ú–æ–∏ —Å–∞–π—Ç—ã

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ —Å–∞–π—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:

üåê https://prothemesru.vercel.app

–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö
‚Ä¢ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

üîê –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º
        """
        
        keyboard = [
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", url="https://prothemesru.vercel.app")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.send_or_edit_message(update, context, text, reply_markup)
    
    async def send_or_edit_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        query = update.callback_query
        if query:
            try:
                await query.edit_message_text(text=text, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await query.message.reply_text(text=text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text=text, reply_markup=reply_markup)
    
    async def send_error_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, error_text: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        text = f"‚ùå {error_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @ProThemesRU_Bot"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.send_or_edit_message(update, context, text, reply_markup)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = ProThemesRUBot()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if TELEGRAM_BOT_TOKEN:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("templates", bot.templates_command))
    application.add_handler(CommandHandler("my_sites", bot.my_sites_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(bot.button_handler))
else:
    application = None
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'message': 'ProThemesRU Telegram Bot',
        'status': 'running',
        'version': '1.0.0'
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram"""
    if application is None:
        return jsonify({'error': 'Bot not initialized'}), 500
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        update = Update.de_json(request.get_json(), application.bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        application.process_update(update)
        
        return jsonify({'status': 'ok'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/set-webhook', methods=['GET'])
def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    if application is None:
        return jsonify({'error': 'Bot not initialized'}), 500
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        success = application.bot.set_webhook(url=WEBHOOK_URL)
        
        if success:
            return jsonify({
                'status': 'success',
                'message': f'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}'
            })
        else:
            return jsonify({
                'status': 'error',
                'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook'
            })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        'status': 'healthy',
        'bot_token': 'set' if TELEGRAM_BOT_TOKEN else 'not_set',
        'api_url': API_BASE_URL,
        'webhook_url': WEBHOOK_URL
    })

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=int(os.environ.get('PORT', 5000))) 