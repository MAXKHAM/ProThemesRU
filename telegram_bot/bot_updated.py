#!/usr/bin/env python3
"""
ProThemesRU - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import os
import json
import requests
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, config.LOG_LEVEL),
    filename=config.LOG_FILE
)
logger = logging.getLogger(__name__)

# –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_db = {}
projects_db = {}

class ProThemesRUBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if not config.TELEGRAM_BOT_TOKEN or config.TELEGRAM_BOT_TOKEN == 'your_bot_token_here':
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        
        self.application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()
        
        logger.info("ProThemesRU Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"API Base URL: {config.API_BASE_URL}")
        logger.info(f"Webhook URL: {config.WEBHOOK_URL}")
        logger.info(f"Environment: {config.ENVIRONMENT}")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("templates", self.templates_command))
        self.application.add_handler(CommandHandler("create", self.create_command))
        self.application.add_handler(CommandHandler("profile", self.profile_command))
        self.application.add_handler(CommandHandler("projects", self.projects_command))
        self.application.add_handler(CommandHandler("support", self.support_command))
        self.application.add_handler(CommandHandler("referral", self.referral_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_db[chat_id] = {
            'id': chat_id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'joined_at': datetime.now().isoformat(),
            'projects': [],
            'referral_code': f"REF{chat_id}"
        }
        
        welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ProThemesRU, {user.first_name}!

üöÄ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ!

‚ú® –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:
‚Ä¢ –í—ã–±–∏—Ä–∞—Ç—å –∏–∑ 25+ –ø—Ä–µ–º–∏—É–º —à–∞–±–ª–æ–Ω–æ–≤
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–∞–π—Ç—ã —á–µ—Ä–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞
/templates - –ü—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–æ–≤
/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∞–π—Ç
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/projects - –í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã
/referral - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
/support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞

üéØ –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤: /templates
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –®–∞–±–ª–æ–Ω—ã", callback_data="templates")],
            [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç", callback_data="create")],
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton("üí∞ –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referral")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({chat_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = f"""
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ ProThemesRU

üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/templates - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∞–π—Ç
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/projects - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
/referral - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
/support - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

üé® –®–∞–±–ª–æ–Ω—ã:
‚Ä¢ Gaming - –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∞–π—Ç–æ–≤
‚Ä¢ Business - –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
‚Ä¢ Portfolio - –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
‚Ä¢ E-commerce - –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤
‚Ä¢ Blog - –¥–ª—è –±–ª–æ–≥–æ–≤

üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é {config.REFERRAL_COMMISSION*100}% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {config.MIN_WITHDRAWAL}‚ÇΩ

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
‚Ä¢ Email: {config.SUPPORT_EMAIL}
‚Ä¢ Telegram: {config.SUPPORT_TELEGRAM}
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7

üåê –°–∞–π—Ç: {config.WEBSITE_URL}
        """
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")],
            [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_text, reply_markup=reply_markup)
    
    async def templates_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /templates"""
        await self.show_templates(update, context)
    
    async def show_templates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
        text = "üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:\n\n"
        
        keyboard = []
        for template_id, template in config.TEMPLATES.items():
            text += f"üìã {template['name']}\n"
            text += f"üí∞ –¶–µ–Ω–∞: {template['price']}‚ÇΩ\n"
            text += f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template['category']}\n\n"
            
            keyboard.append([InlineKeyboardButton(
                f"–í—ã–±—Ä–∞—Ç—å {template['name']}", 
                callback_data=f"select_template_{template_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def referral_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /referral"""
        chat_id = update.effective_chat.id
        user = users_db.get(chat_id, {})
        
        if not user:
            await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        referral_code = user.get('referral_code', f"REF{chat_id}")
        
        text = f"""
üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
https://t.me/ProThemesRUBot?start=ref_{referral_code}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: 0 —á–µ–ª–æ–≤–µ–∫
üíµ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 0‚ÇΩ
üéØ –î–æ –≤—ã–≤–æ–¥–∞: {config.MIN_WITHDRAWAL}‚ÇΩ

üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º
2. –û–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ
3. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {config.REFERRAL_COMMISSION*100}% –æ—Ç –∏—Ö –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
4. –í—ã–≤–æ–¥–∏—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏

üìû –í–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {config.SUPPORT_TELEGRAM}
        """
        
        keyboard = [
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", switch_inline_query=f"ref_{referral_code}")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="referral_stats")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def create_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /create"""
        text = """
üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞

–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:

1Ô∏è‚É£ –®–∞–±–ª–æ–Ω–Ω—ã–π —Å–∞–π—Ç - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –≥–æ—Ç–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
2Ô∏è‚É£ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - —Å–æ–∑–¥–∞–Ω–∏–µ —Å –Ω—É–ª—è —á–µ—Ä–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
3Ô∏è‚É£ –ö–∞—Å—Ç–æ–º–Ω—ã–π –∑–∞–∫–∞–∑ - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞

–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –®–∞–±–ª–æ–Ω–Ω—ã–π —Å–∞–π—Ç", callback_data="create_template")],
            [InlineKeyboardButton("üîß –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", callback_data="create_constructor")],
            [InlineKeyboardButton("üé® –ö–∞—Å—Ç–æ–º–Ω—ã–π –∑–∞–∫–∞–∑", callback_data="create_custom")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile"""
        chat_id = update.effective_chat.id
        user = users_db.get(chat_id, {})
        
        if not user:
            await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        text = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å

üìù –ò–º—è: {user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üÜî ID: {chat_id}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('joined_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìä –ü—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(user.get('projects', []))}

üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:
üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/ProThemesRUBot?start=ref_{user.get('referral_code', f'REF{chat_id}')}
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: 0 —á–µ–ª–æ–≤–µ–∫
üíµ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 0‚ÇΩ

üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å–∞–π—Ç–æ–≤: {len(user.get('projects', []))}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {len([p for p in user.get('projects', []) if p.get('status') == 'active'])}
        """
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
            [InlineKeyboardButton("üí∞ –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referral")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def projects_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /projects"""
        chat_id = update.effective_chat.id
        user = users_db.get(chat_id, {})
        
        if not user:
            await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        projects = user.get('projects', [])
        
        if not projects:
            text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å–∞–π—Ç: /create"
            keyboard = [[InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç", callback_data="create")]]
        else:
            text = f"üìã –í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã ({len(projects)}):\n\n"
            
            keyboard = []
            for i, project in enumerate(projects[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                text += f"{i}. {project.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                text += f"   –°—Ç–∞—Ç—É—Å: {project.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                text += f"   –°–æ–∑–¥–∞–Ω: {project.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"–û—Ç–∫—Ä—ã—Ç—å {project.get('name', '–ü—Ä–æ–µ–∫—Ç')}", 
                    callback_data=f"open_project_{project.get('id', i)}"
                )])
        
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def support_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /support"""
        text = f"""
üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ProThemesRU

üÜò –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:

üìß Email: {config.SUPPORT_EMAIL}
üí¨ Telegram: {config.SUPPORT_TELEGRAM}
üåê –°–∞–π—Ç: {config.WEBSITE_URL}

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7

üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
‚Ä¢ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç? - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create
‚Ä¢ –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω? - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /templates
‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞? - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /referral

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º
‚Ä¢ –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–∞
        """
        
        keyboard = [
            [InlineKeyboardButton("üìß –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=f"https://t.me/{config.SUPPORT_TELEGRAM.replace('@', '')}")],
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=config.WEBSITE_URL)],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "start":
            await self.start_command(update, context)
        elif data == "help":
            await self.help_command(update, context)
        elif data == "templates":
            await self.show_templates(update, context)
        elif data == "create":
            await self.create_command(update, context)
        elif data == "profile":
            await self.profile_command(update, context)
        elif data == "support":
            await self.support_command(update, context)
        elif data == "referral":
            await self.referral_command(update, context)
        elif data.startswith("select_template_"):
            template_id = data.split("_")[-1]
            await self.select_template(update, context, template_id)
        elif data == "create_template":
            await self.create_template_site(update, context)
        elif data == "create_constructor":
            await self.create_constructor_site(update, context)
        elif data == "create_custom":
            await self.create_custom_site(update, context)
    
    async def select_template(self, update: Update, context: ContextTypes.DEFAULT_TYPE, template_id: str):
        """–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞"""
        template = config.TEMPLATES.get(template_id)
        if not template:
            await update.callback_query.edit_message_text("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        text = f"""
üé® –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {template['name']}

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {template['price']}‚ÇΩ

üìã –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:
‚Ä¢ –ì–æ—Ç–æ–≤—ã–π HTML/CSS –∫–æ–¥
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
‚Ä¢ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
‚Ä¢ 30 –¥–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏

üöÄ –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç —Å —ç—Ç–∏–º —à–∞–±–ª–æ–Ω–æ–º?
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç", callback_data=f"buy_template_{template_id}")],
            [InlineKeyboardButton("üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"preview_template_{template_id}")],
            [InlineKeyboardButton("üìã –î—Ä—É–≥–∏–µ —à–∞–±–ª–æ–Ω—ã", callback_data="templates")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def create_template_site(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"""
        text = """
üìã –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à–∞–±–ª–æ–Ω–∞:

üéÆ Gaming - –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∞–π—Ç–æ–≤
üíº Business - –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
üé® Portfolio - –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
üõí E-commerce - –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
üìù Blog - –¥–ª—è –±–ª–æ–≥–æ–≤
        """
        
        keyboard = [
            [InlineKeyboardButton("üéÆ Gaming", callback_data="category_gaming")],
            [InlineKeyboardButton("üíº Business", callback_data="category_business")],
            [InlineKeyboardButton("üé® Portfolio", callback_data="category_portfolio")],
            [InlineKeyboardButton("üõí E-commerce", callback_data="category_ecommerce")],
            [InlineKeyboardButton("üìù Blog", callback_data="category_blog")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def create_constructor_site(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"""
        text = f"""
üîß –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∞–π—Ç–æ–≤

–°–æ–∑–¥–∞–π—Ç–µ —Å–∞–π—Ç —Å –Ω—É–ª—è —á–µ—Ä–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä!

‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ Drag-and-drop –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∏ —à—Ä–∏—Ñ—Ç–æ–≤
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

üåê –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–∞ —Å–∞–π—Ç–µ:
        """
        
        keyboard = [
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", url=f"{config.WEBSITE_URL}/constructor")],
            [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url=f"{config.WEBSITE_URL}/help")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def create_custom_site(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–∞–π—Ç–∞"""
        text = f"""
üé® –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞

–°–æ–∑–¥–∞–¥–∏–º —Å–∞–π—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å!

üìã –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω
‚Ä¢ –ü–æ–ª–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–µ —Å —Å–∞–π—Ç–æ–º

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç 15000‚ÇΩ

üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:
        """
        
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url=f"https://t.me/{config.SUPPORT_TELEGRAM.replace('@', '')}")],
            [InlineKeyboardButton("üìß Email", url=f"mailto:{config.SUPPORT_EMAIL}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        if "–ø—Ä–∏–≤–µ—Ç" in text.lower():
            await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        elif "—Å–ø–∞—Å–∏–±–æ" in text.lower():
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")
        elif "—Å–∞–π—Ç" in text.lower():
            await update.message.reply_text(f"üåê –ù–∞—à —Å–∞–π—Ç: {config.WEBSITE_URL}\n\n–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–∞–π—Ç—ã –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ!")
        else:
            await update.message.reply_text(
                "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ ProThemesRU Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print(f"üîó API Base URL: {config.API_BASE_URL}")
        print(f"üîó Webhook URL: {config.WEBHOOK_URL}")
        print(f"üåç Environment: {config.ENVIRONMENT}")
        print(f"üîß Debug: {config.DEBUG}")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        if config.ENABLE_WEBHOOK:
            print("üîó –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook...")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è webhook
        else:
            print("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
            self.application.run_polling()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = ProThemesRUBot()
        bot.run()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main() 