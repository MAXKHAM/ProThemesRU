#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ProThemesRU
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç API, –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import requests
import json
import sys
import time
from datetime import datetime

class ProThemesRUTester:
    def __init__(self, base_url="https://your-real-url-here.com"):
        self.base_url = base_url
        self.test_results = []
        self.session = requests.Session()
        
    def log_test(self, test_name, success, message=""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        timestamp = datetime.now().strftime("%H:%M:%S")
        result = f"[{timestamp}] {status} {test_name}"
        if message:
            result += f" - {message}"
        print(result)
        self.test_results.append({
            'test': test_name,
            'success': success,
            'message': message,
            'timestamp': timestamp
        })
        return success
    
    def test_api_health(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
        try:
            response = self.session.get(f"{self.base_url}/api/health")
            if response.status_code == 200:
                data = response.json()
                return self.log_test(
                    "API Health Check",
                    True,
                    f"Status: {data.get('status')}, Templates: {data.get('templates_count')}"
                )
            else:
                return self.log_test("API Health Check", False, f"Status code: {response.status_code}")
        except Exception as e:
            return self.log_test("API Health Check", False, str(e))
    
    def test_main_page(self):
        """–¢–µ—Å—Ç 2: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        try:
            response = self.session.get(f"{self.base_url}/")
            if response.status_code == 200:
                data = response.json()
                return self.log_test(
                    "Main Page",
                    True,
                    f"Version: {data.get('version')}, Status: {data.get('status')}"
                )
            else:
                return self.log_test("Main Page", False, f"Status code: {response.status_code}")
        except Exception as e:
            return self.log_test("Main Page", False, str(e))
    
    def test_templates_api(self):
        """–¢–µ—Å—Ç 3: API —à–∞–±–ª–æ–Ω–æ–≤"""
        try:
            response = self.session.get(f"{self.base_url}/api/templates")
            if response.status_code == 200:
                data = response.json()
                templates_count = len(data.get('templates', []))
                return self.log_test(
                    "Templates API",
                    True,
                    f"Found {templates_count} templates"
                )
            else:
                return self.log_test("Templates API", False, f"Status code: {response.status_code}")
        except Exception as e:
            return self.log_test("Templates API", False, str(e))
    
    def test_user_registration(self):
        """–¢–µ—Å—Ç 4: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            test_user = {
                "username": f"testuser_{int(time.time())}",
                "email": f"test_{int(time.time())}@example.com",
                "password": "testpassword123"
            }
            
            response = self.session.post(
                f"{self.base_url}/api/auth/register",
                json=test_user
            )
            
            if response.status_code == 201:
                data = response.json()
                return self.log_test(
                    "User Registration",
                    True,
                    f"User created: {test_user['username']}"
                )
            else:
                return self.log_test("User Registration", False, f"Status code: {response.status_code}")
        except Exception as e:
            return self.log_test("User Registration", False, str(e))
    
    def test_user_login(self):
        """–¢–µ—Å—Ç 5: –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            login_data = {
                "username": "testuser",
                "password": "testpassword123"
            }
            
            response = self.session.post(
                f"{self.base_url}/api/auth/login",
                json=login_data
            )
            
            if response.status_code == 200:
                data = response.json()
                token = data.get('access_token')
                if token:
                    self.session.headers.update({'Authorization': f'Bearer {token}'})
                    return self.log_test(
                        "User Login",
                        True,
                        "Token received successfully"
                    )
                else:
                    return self.log_test("User Login", False, "No token in response")
            else:
                return self.log_test("User Login", False, f"Status code: {response.status_code}")
        except Exception as e:
            return self.log_test("User Login", False, str(e))
    
    def test_sites_api(self):
        """–¢–µ—Å—Ç 6: API —Å–∞–π—Ç–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
        try:
            response = self.session.get(f"{self.base_url}/api/sites")
            if response.status_code == 200:
                data = response.json()
                sites_count = len(data.get('sites', []))
                return self.log_test(
                    "Sites API",
                    True,
                    f"Found {sites_count} sites"
                )
            elif response.status_code == 401:
                return self.log_test("Sites API", False, "Authentication required")
            else:
                return self.log_test("Sites API", False, f"Status code: {response.status_code}")
        except Exception as e:
            return self.log_test("Sites API", False, str(e))
    
    def test_database_connection(self):
        """–¢–µ—Å—Ç 7: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            response = self.session.get(f"{self.base_url}/api/health")
            if response.status_code == 200:
                data = response.json()
                if data.get('database') == 'connected':
                    return self.log_test(
                        "Database Connection",
                        True,
                        "Database is connected"
                    )
                else:
                    return self.log_test("Database Connection", False, "Database not connected")
            else:
                return self.log_test("Database Connection", False, f"Status code: {response.status_code}")
        except Exception as e:
            return self.log_test("Database Connection", False, str(e))
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ProThemesRU")
        print("=" * 60)
        
        tests = [
            self.test_api_health,
            self.test_main_page,
            self.test_templates_api,
            self.test_database_connection,
            self.test_user_registration,
            self.test_user_login,
            self.test_sites_api
        ]
        
        passed = 0
        total = len(tests)
        
        for test in tests:
            if test():
                passed += 1
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        print("=" * 60)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
        
        if passed == total:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print(f"\n‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        
        return passed == total

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ProThemesRU')
    parser.add_argument('--url', default='https://your-real-url-here.com', 
                       help='URL API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://your-real-url-here.com)')
    
    args = parser.parse_args()
    
    print(f"üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø–æ –∞–¥—Ä–µ—Å—É: {args.url}")
    print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: --url https://your-domain.com")
    
    tester = ProThemesRUTester(args.url)
    success = tester.run_all_tests()
    
    if success:
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ Telegram –±–æ—Ç–∞")
        print("2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
        print("4. –ü—Ä–∏–≤–ª–µ–∫–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
    else:
        print("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main() 