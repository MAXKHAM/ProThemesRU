{"ast":null,"code":"const MAX_CONTAINER_WIDTH = 960; // Максимальная ширина для адаптивного контейнера\n\nexport function cssStringToObject(cssString) {\n  const styles = {};\n  if (!cssString) return styles;\n  cssString = cssString.replace(/\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/gm, '$1');\n  const parts = cssString.split(';');\n  parts.forEach(part => {\n    const trimmedPart = part.trim();\n    if (trimmedPart) {\n      const colonIndex = trimmedPart.indexOf(':');\n      if (colonIndex > 0) {\n        const key = trimmedPart.substring(0, colonIndex).trim();\n        const value = trimmedPart.substring(colonIndex + 1).trim();\n        if (key && value) {\n          styles[key] = value;\n        }\n      }\n    }\n  });\n  return styles;\n}\nexport function objectToCssString(cssObject) {\n  if (!cssObject) return \"\";\n  return Object.entries(cssObject).map(([key, value]) => `${key}: ${value}`).join('; ') + (Object.keys(cssObject).length > 0 ? ';' : '');\n}\nexport function generateHtmlCss(elements) {\n  const elementMap = new Map(elements.map(el => [el.id, el]));\n  const rootElements = elements.filter(el => !el.parentId);\n  let minX = Infinity,\n    minY = Infinity;\n  let maxX = -Infinity,\n    maxY = -Infinity;\n  if (rootElements.length > 0) {\n    rootElements.forEach(el => {\n      minX = Math.min(minX, el.x);\n      minY = Math.min(minY, el.y);\n      maxX = Math.max(maxX, el.x + el.width);\n      maxY = Math.max(maxY, el.y + el.height);\n    });\n  } else {\n    minX = 0;\n    minY = 0;\n    maxX = MAX_CONTAINER_WIDTH;\n    maxY = 300;\n  }\n  const originalDesignWidth = maxX - minX;\n  const originalDesignHeight = maxY - minY;\n  const scaleFactor = originalDesignWidth > MAX_CONTAINER_WIDTH && originalDesignWidth > 0 ? MAX_CONTAINER_WIDTH / originalDesignWidth : 1;\n  const scaledContainerHeight = originalDesignHeight * scaleFactor;\n  let htmlContent = `<!DOCTYPE html>\n<html lang=\"ru\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Мой Сайт (ProThemesRU)</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <style>\n        /* Базовые стили для элементов конструктора */\n        .canvas-element {\n            box-sizing: border-box;\n            overflow: hidden;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        /* Только для элементов, которые абсолютно позиционированы */\n        .canvas-element[style*=\"position: absolute;\"] {\n             position: absolute; /* Добавляем явно, если стиль не переопределен Flexbox */\n        }\n\n        /* Для дочерних элементов внутри группы */\n        .group-element > .canvas-element {\n            /* Если родитель flex/grid, то position: absolute не нужен */\n            /* Эти стили будут переопределены инлайн стилями, если displayMode не absolute */\n        }\n\n        .canvas-element > * {\n            width: 100%;\n            height: 100%;\n            box-sizing: border-box;\n        }\n\n        .text-element {\n            text-align: center;\n            word-break: break-word;\n            padding: 5px;\n        }\n        .image-element {\n            display: block;\n            object-fit: contain;\n            max-width: 100%;\n            height: auto;\n        }\n        .button-element {\n            padding: 8px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            white-space: nowrap;\n        }\n        .shape-element {\n            /* background-color and border-radius are inline */\n        }\n    </style>\n</head>\n<body>\n    <div id=\"main-content-area\">\n`;\n  let cssContent = `\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: Arial, sans-serif;\n    background-color: #f0f0f0;\n    min-height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n    padding: 20px 0;\n    box-sizing: border-box;\n}\n\n#main-content-area {\n    position: relative;\n    max-width: ${MAX_CONTAINER_WIDTH}px;\n    width: 100%;\n    margin: 0 auto;\n    min-height: ${Math.max(scaledContainerHeight, 200)}px;\n    background-color: #ffffff;\n    box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);\n    border-radius: 8px;\n    overflow: hidden;\n}\n`;\n  // Рекурсивная функция для рендеринга элементов\n  function renderElementHtmlAndCss(element) {\n    const children = elements.filter(el => el.parentId === element.id);\n    let inlineStyles = '';\n    let elementClasses = 'canvas-element';\n\n    // Определяем, является ли родительский элемент Flexbox-контейнером\n    const parent = element.parentId ? elementMap.get(element.parentId) : null;\n    const isChildOfFlexContainer = parent && parent.type === 'group' && parent.props.displayMode === 'flex';\n    if (isChildOfFlexContainer) {\n      // Если элемент является дочерним для Flexbox-контейнера,\n      // мы не используем position: absolute, left, top.\n      // Вместо этого, его ширина и высота станут flex-basis или min/max-width/height.\n      // Для простоты, пока будем использовать width/height как есть.\n      // Можно добавить flex-grow: 1; flex-shrink: 1; flex-basis: auto;\n      // Или конкретно: flex-basis: ${element.width}px;\n      inlineStyles += `width: ${element.width}px; height: ${element.height}px;`;\n    } else {\n      // Если не дочерний для Flexbox-контейнера (т.е. абсолютный или корневой)\n      const elX = element.x;\n      const elY = element.y;\n      const newX = element.parentId === null ? (elX - minX) * scaleFactor : elX;\n      const newY = element.parentId === null ? (elY - minY) * scaleFactor : elY;\n      const newWidth = element.parentId === null ? element.width * scaleFactor : element.width;\n      const newHeight = element.parentId === null ? element.height * scaleFactor : element.height;\n      inlineStyles += `position: absolute; left: ${newX}px; top: ${newY}px; width: ${newWidth}px; height: ${newHeight}px;`;\n    }\n\n    // Добавляем пользовательские классы\n    if (element.props.customClasses && element.props.customClasses.length > 0) {\n      elementClasses += ` ${element.props.customClasses.join(' ')}`;\n    }\n    let innerHtml = '';\n    switch (element.type) {\n      case 'text':\n        innerHtml = `<div class=\"text-element\">${element.props.content || ''}</div>`;\n        inlineStyles += ` font-size: ${element.props.fontSize || '16px'}; color: ${element.props.color || '#000000'};`;\n        break;\n      case 'image':\n        innerHtml = `<img src=\"${element.props.src || ''}\" alt=\"${element.props.alt || ''}\" class=\"image-element\">`;\n        break;\n      case 'button':\n        innerHtml = `<button class=\"button-element\">${element.props.label || ''}</button>`;\n        inlineStyles += ` background-color: ${element.props.bgColor || '#007bff'}; color: ${element.props.textColor || '#ffffff'};`;\n        break;\n      case 'shape':\n        innerHtml = `<div class=\"shape-element\"></div>`;\n        inlineStyles += ` background-color: ${element.props.bgColor || '#ffc107'}; border-radius: ${element.props.borderRadius || '0'};`;\n        break;\n      case 'group':\n        elementClasses += ' group-element';\n        if (element.props.displayMode === 'flex') {\n          inlineStyles += ` display: flex;`;\n          if (element.props.flexDirection) inlineStyles += ` flex-direction: ${element.props.flexDirection};`;\n          if (element.props.justifyContent) inlineStyles += ` justify-content: ${element.props.justifyContent};`;\n          if (element.props.alignItems) inlineStyles += ` align-items: ${element.props.alignItems};`;\n          if (element.props.gap) inlineStyles += ` gap: ${element.props.gap};`;\n          // Группа с flexbox не имеет background-color/border-radius по умолчанию\n          // Если нужно, их можно добавить через customStyles\n        } else {\n          // Если группа в абсолютном режиме\n          inlineStyles += ` position: absolute;`; // Явно указываем absolute для группы\n          inlineStyles += ` background-color: rgba(255, 255, 255, 0.05); border: 1px dashed rgba(0, 0, 0, 0.1);`;\n        }\n\n        // Рекурсивно рендерим детей\n        innerHtml = children.map(child => renderElementHtmlAndCss(child)).join('\\n');\n        break;\n      default:\n        innerHtml = `<div>Неизвестный элемент</div>`;\n    }\n\n    // Добавляем пользовательские инлайн-стили в конце, чтобы они переопределяли предыдущие\n    if (element.props.customStyles) {\n      inlineStyles += ` ${objectToCssString(element.props.customStyles)}`;\n    }\n    return `        <div id=\"${element.id}\" class=\"${elementClasses}\" style=\"${inlineStyles}\">${innerHtml}</div>`;\n  }\n  htmlContent += rootElements.map(el => renderElementHtmlAndCss(el)).join('\\n');\n  htmlContent += `    </div>\n</body>\n</html>`;\n  return {\n    htmlContent,\n    cssContent\n  };\n}","map":{"version":3,"names":["MAX_CONTAINER_WIDTH","cssStringToObject","cssString","styles","replace","parts","split","forEach","part","trimmedPart","trim","colonIndex","indexOf","key","substring","value","objectToCssString","cssObject","Object","entries","map","join","keys","length","generateHtmlCss","elements","elementMap","Map","el","id","rootElements","filter","parentId","minX","Infinity","minY","maxX","maxY","Math","min","x","y","max","width","height","originalDesignWidth","originalDesignHeight","scaleFactor","scaledContainerHeight","htmlContent","cssContent","renderElementHtmlAndCss","element","children","inlineStyles","elementClasses","parent","get","isChildOfFlexContainer","type","props","displayMode","elX","elY","newX","newY","newWidth","newHeight","customClasses","innerHtml","content","fontSize","color","src","alt","label","bgColor","textColor","borderRadius","flexDirection","justifyContent","alignItems","gap","child","customStyles"],"sources":["C:/Users/user/Desktop/ProThemesRU1/frontend/src/utils/exportUtils.js"],"sourcesContent":["const MAX_CONTAINER_WIDTH = 960; // Максимальная ширина для адаптивного контейнера\r\n\r\nexport function cssStringToObject(cssString) {\r\n    const styles = {};\r\n    if (!cssString) return styles;\r\n    cssString = cssString.replace(/\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/gm, '$1');\r\n    const parts = cssString.split(';');\r\n    parts.forEach(part => {\r\n        const trimmedPart = part.trim();\r\n        if (trimmedPart) {\r\n            const colonIndex = trimmedPart.indexOf(':');\r\n            if (colonIndex > 0) {\r\n                const key = trimmedPart.substring(0, colonIndex).trim();\r\n                const value = trimmedPart.substring(colonIndex + 1).trim();\r\n                if (key && value) {\r\n                    styles[key] = value;\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return styles;\r\n}\r\n\r\nexport function objectToCssString(cssObject) {\r\n    if (!cssObject) return \"\";\r\n    return Object.entries(cssObject)\r\n        .map(([key, value]) => `${key}: ${value}`)\r\n        .join('; ') + (Object.keys(cssObject).length > 0 ? ';' : '');\r\n}\r\n\r\nexport function generateHtmlCss(elements) {\r\n    const elementMap = new Map(elements.map(el => [el.id, el]));\r\n    const rootElements = elements.filter(el => !el.parentId);\r\n\r\n    let minX = Infinity, minY = Infinity;\r\n    let maxX = -Infinity, maxY = -Infinity;\r\n\r\n    if (rootElements.length > 0) {\r\n        rootElements.forEach(el => {\r\n            minX = Math.min(minX, el.x);\r\n            minY = Math.min(minY, el.y);\r\n            maxX = Math.max(maxX, el.x + el.width);\r\n            maxY = Math.max(maxY, el.y + el.height);\r\n        });\r\n    } else {\r\n        minX = 0; minY = 0; maxX = MAX_CONTAINER_WIDTH; maxY = 300;\r\n    }\r\n\r\n    const originalDesignWidth = maxX - minX;\r\n    const originalDesignHeight = maxY - minY;\r\n\r\n    const scaleFactor = originalDesignWidth > MAX_CONTAINER_WIDTH && originalDesignWidth > 0\r\n        ? MAX_CONTAINER_WIDTH / originalDesignWidth\r\n        : 1;\r\n\r\n    const scaledContainerHeight = originalDesignHeight * scaleFactor;\r\n\r\n    let htmlContent = `<!DOCTYPE html>\r\n<html lang=\"ru\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Мой Сайт (ProThemesRU)</title>\r\n    <link rel=\"stylesheet\" href=\"style.css\">\r\n    <style>\r\n        /* Базовые стили для элементов конструктора */\r\n        .canvas-element {\r\n            box-sizing: border-box;\r\n            overflow: hidden;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        /* Только для элементов, которые абсолютно позиционированы */\r\n        .canvas-element[style*=\"position: absolute;\"] {\r\n             position: absolute; /* Добавляем явно, если стиль не переопределен Flexbox */\r\n        }\r\n\r\n        /* Для дочерних элементов внутри группы */\r\n        .group-element > .canvas-element {\r\n            /* Если родитель flex/grid, то position: absolute не нужен */\r\n            /* Эти стили будут переопределены инлайн стилями, если displayMode не absolute */\r\n        }\r\n\r\n        .canvas-element > * {\r\n            width: 100%;\r\n            height: 100%;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        .text-element {\r\n            text-align: center;\r\n            word-break: break-word;\r\n            padding: 5px;\r\n        }\r\n        .image-element {\r\n            display: block;\r\n            object-fit: contain;\r\n            max-width: 100%;\r\n            height: auto;\r\n        }\r\n        .button-element {\r\n            padding: 8px 15px;\r\n            border: none;\r\n            border-radius: 4px;\r\n            cursor: pointer;\r\n            font-size: 14px;\r\n            white-space: nowrap;\r\n        }\r\n        .shape-element {\r\n            /* background-color and border-radius are inline */\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div id=\"main-content-area\">\r\n`;\r\n    let cssContent = `\r\nbody {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: Arial, sans-serif;\r\n    background-color: #f0f0f0;\r\n    min-height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n    padding: 20px 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n#main-content-area {\r\n    position: relative;\r\n    max-width: ${MAX_CONTAINER_WIDTH}px;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    min-height: ${Math.max(scaledContainerHeight, 200)}px;\r\n    background-color: #ffffff;\r\n    box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n}\r\n`;\r\n    // Рекурсивная функция для рендеринга элементов\r\n    function renderElementHtmlAndCss(element) {\r\n        const children = elements.filter(el => el.parentId === element.id);\r\n\r\n        let inlineStyles = '';\r\n        let elementClasses = 'canvas-element';\r\n\r\n        // Определяем, является ли родительский элемент Flexbox-контейнером\r\n        const parent = element.parentId ? elementMap.get(element.parentId) : null;\r\n        const isChildOfFlexContainer = parent && parent.type === 'group' && parent.props.displayMode === 'flex';\r\n\r\n        if (isChildOfFlexContainer) {\r\n            // Если элемент является дочерним для Flexbox-контейнера,\r\n            // мы не используем position: absolute, left, top.\r\n            // Вместо этого, его ширина и высота станут flex-basis или min/max-width/height.\r\n            // Для простоты, пока будем использовать width/height как есть.\r\n            // Можно добавить flex-grow: 1; flex-shrink: 1; flex-basis: auto;\r\n            // Или конкретно: flex-basis: ${element.width}px;\r\n            inlineStyles += `width: ${element.width}px; height: ${element.height}px;`;\r\n        } else {\r\n            // Если не дочерний для Flexbox-контейнера (т.е. абсолютный или корневой)\r\n            const elX = element.x;\r\n            const elY = element.y;\r\n            const newX = (element.parentId === null) ? (elX - minX) * scaleFactor : elX;\r\n            const newY = (element.parentId === null) ? (elY - minY) * scaleFactor : elY;\r\n            const newWidth = (element.parentId === null) ? element.width * scaleFactor : element.width;\r\n            const newHeight = (element.parentId === null) ? element.height * scaleFactor : element.height;\r\n\r\n            inlineStyles += `position: absolute; left: ${newX}px; top: ${newY}px; width: ${newWidth}px; height: ${newHeight}px;`;\r\n        }\r\n\r\n        // Добавляем пользовательские классы\r\n        if (element.props.customClasses && element.props.customClasses.length > 0) {\r\n            elementClasses += ` ${element.props.customClasses.join(' ')}`;\r\n        }\r\n\r\n        let innerHtml = '';\r\n        switch (element.type) {\r\n            case 'text':\r\n                innerHtml = `<div class=\"text-element\">${element.props.content || ''}</div>`;\r\n                inlineStyles += ` font-size: ${element.props.fontSize || '16px'}; color: ${element.props.color || '#000000'};`;\r\n                break;\r\n            case 'image':\r\n                innerHtml = `<img src=\"${element.props.src || ''}\" alt=\"${element.props.alt || ''}\" class=\"image-element\">`;\r\n                break;\r\n            case 'button':\r\n                innerHtml = `<button class=\"button-element\">${element.props.label || ''}</button>`;\r\n                inlineStyles += ` background-color: ${element.props.bgColor || '#007bff'}; color: ${element.props.textColor || '#ffffff'};`;\r\n                break;\r\n            case 'shape':\r\n                innerHtml = `<div class=\"shape-element\"></div>`;\r\n                inlineStyles += ` background-color: ${element.props.bgColor || '#ffc107'}; border-radius: ${element.props.borderRadius || '0'};`;\r\n                break;\r\n            case 'group':\r\n                elementClasses += ' group-element';\r\n                if (element.props.displayMode === 'flex') {\r\n                    inlineStyles += ` display: flex;`;\r\n                    if (element.props.flexDirection) inlineStyles += ` flex-direction: ${element.props.flexDirection};`;\r\n                    if (element.props.justifyContent) inlineStyles += ` justify-content: ${element.props.justifyContent};`;\r\n                    if (element.props.alignItems) inlineStyles += ` align-items: ${element.props.alignItems};`;\r\n                    if (element.props.gap) inlineStyles += ` gap: ${element.props.gap};`;\r\n                    // Группа с flexbox не имеет background-color/border-radius по умолчанию\r\n                    // Если нужно, их можно добавить через customStyles\r\n                } else {\r\n                    // Если группа в абсолютном режиме\r\n                    inlineStyles += ` position: absolute;`; // Явно указываем absolute для группы\r\n                    inlineStyles += ` background-color: rgba(255, 255, 255, 0.05); border: 1px dashed rgba(0, 0, 0, 0.1);`;\r\n                }\r\n\r\n                // Рекурсивно рендерим детей\r\n                innerHtml = children.map(child => renderElementHtmlAndCss(child)).join('\\n');\r\n                break;\r\n            default:\r\n                innerHtml = `<div>Неизвестный элемент</div>`;\r\n        }\r\n\r\n        // Добавляем пользовательские инлайн-стили в конце, чтобы они переопределяли предыдущие\r\n        if (element.props.customStyles) {\r\n            inlineStyles += ` ${objectToCssString(element.props.customStyles)}`;\r\n        }\r\n\r\n        return `        <div id=\"${element.id}\" class=\"${elementClasses}\" style=\"${inlineStyles}\">${innerHtml}</div>`;\r\n    }\r\n\r\n    htmlContent += rootElements.map(el => renderElementHtmlAndCss(el)).join('\\n');\r\n\r\n    htmlContent += `    </div>\r\n</body>\r\n</html>`;\r\n\r\n    return { htmlContent, cssContent };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}