#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
"""

import os
import requests
import json
import zipfile
import shutil
from pathlib import Path
from urllib.parse import urljoin
import time
from PIL import Image, ImageDraw, ImageFont
import io

class TemplateDownloader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    
    def __init__(self):
        self.base_url = "https://api.github.com"
        self.templates_dir = Path("templates/blocks")
        self.static_dir = Path("static")
        self.downloaded_count = 0
        
    def create_placeholder_image(self, width, height, text, filename, bg_color=(74, 144, 226), text_color=(255, 255, 255)):
        """–°–æ–∑–¥–∞–Ω–∏–µ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGB', (width, height), bg_color)
            draw = ImageDraw.Draw(img)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
            try:
                font = ImageFont.truetype("arial.ttf", 24)
            except:
                font = ImageFont.load_default()
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            x = (width - text_width) // 2
            y = (height - text_height) // 2
            
            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
            draw.text((x, y), text, fill=text_color, font=font)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            filepath = self.static_dir / "images" / filename
            filepath.parent.mkdir(parents=True, exist_ok=True)
            img.save(filepath, "JPEG", quality=85)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω {filename}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {filename}: {e}")
            return False
    
    def download_free_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        print("üé® –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ
        local_templates = [
            {
                "name": "Modern Landing",
                "category": "landing",
                "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–µ–Ω–¥–∏–Ω–≥ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏"
            },
            {
                "name": "E-commerce Store",
                "category": "ecommerce", 
                "description": "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º"
            },
            {
                "name": "Portfolio Gallery",
                "category": "portfolio",
                "description": "–ì–∞–ª–µ—Ä–µ—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"
            }
        ]
        
        for template in local_templates:
            self._create_local_template(template)
            self.downloaded_count += 1
    
    def _create_local_template(self, template):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        print(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ {template['name']}...")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        template_dir = self.templates_dir / template['category'] / template['name'].lower().replace(' ', '_')
        template_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º index.html
        html_content = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{template['name']}</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <header class="header">
        <nav class="nav">
            <div class="logo">{template['name']}</div>
            <ul class="nav-menu">
                <li><a href="#home">–ì–ª–∞–≤–Ω–∞—è</a></li>
                <li><a href="#about">–û –Ω–∞—Å</a></li>
                <li><a href="#services">–£—Å–ª—É–≥–∏</a></li>
                <li><a href="#contact">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a></li>
            </ul>
        </nav>
    </header>
    
    <main>
        <section id="home" class="hero">
            <div class="container">
                <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {template['name']}</h1>
                <p>{template['description']}</p>
                <button class="btn-primary">–ù–∞—á–∞—Ç—å</button>
            </div>
        </section>
    </main>
    
    <footer class="footer">
        <p>&copy; 2024 {template['name']}. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
    </footer>
</body>
</html>"""
        
        with open(template_dir / "index.html", 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        # –°–æ–∑–¥–∞–µ–º style.css
        css_content = f"""/* {template['name']} Styles */
* {{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}}

body {{
    font-family: 'Arial', sans-serif;
    line-height: 1.6;
}}

.container {{
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}}

.header {{
    background: #333;
    color: white;
    padding: 1rem 0;
}}

.nav {{
    display: flex;
    justify-content: space-between;
    align-items: center;
}}

.nav-menu {{
    display: flex;
    list-style: none;
    gap: 2rem;
}}

.nav-menu a {{
    color: white;
    text-decoration: none;
}}

.hero {{
    min-height: 80vh;
    display: flex;
    align-items: center;
    background: linear-gradient(45deg, #667eea, #764ba2);
    color: white;
    text-align: center;
}}

.btn-primary {{
    background: #ff6b6b;
    color: white;
    padding: 12px 30px;
    border: none;
    border-radius: 25px;
    font-size: 1.1rem;
    cursor: pointer;
    margin-top: 2rem;
}}

.footer {{
    background: #333;
    color: white;
    text-align: center;
    padding: 2rem 0;
    margin-top: 4rem;
}}"""
        
        with open(template_dir / "style.css", 'w', encoding='utf-8') as f:
            f.write(css_content)
        
        print(f"‚úÖ {template['name']} —Å–æ–∑–¥–∞–Ω")
    
    def download_ui_components(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("üß± –ó–∞–≥—Ä—É–∑–∫–∞ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è CSS
        css_dir = self.static_dir / "css"
        css_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ CSS —Ñ–∞–π–ª—ã
        self._create_bootstrap_css()
        self._create_fontawesome_css()
        self._create_google_fonts_css()
        self._create_custom_components_css()
    
    def _create_bootstrap_css(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ Bootstrap CSS"""
        bootstrap_css = """/* Bootstrap-like CSS */
.container {
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -15px;
    margin-left: -15px;
}

.col {
    flex: 1 0 0%;
    padding-right: 15px;
    padding-left: 15px;
}

.btn {
    display: inline-block;
    font-weight: 400;
    text-align: center;
    vertical-align: middle;
    user-select: none;
    border: 1px solid transparent;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    line-height: 1.5;
    border-radius: 0.25rem;
    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.btn-primary {
    color: #fff;
    background-color: #007bff;
    border-color: #007bff;
}

.btn-success {
    color: #fff;
    background-color: #28a745;
    border-color: #28a745;
}

.btn-danger {
    color: #fff;
    background-color: #dc3545;
    border-color: #dc3545;
}

.card {
    position: relative;
    display: flex;
    flex-direction: column;
    min-width: 0;
    word-wrap: break-word;
    background-color: #fff;
    background-clip: border-box;
    border: 1px solid rgba(0,0,0,.125);
    border-radius: 0.25rem;
}

.card-body {
    flex: 1 1 auto;
    min-height: 1px;
    padding: 1.25rem;
}

.alert {
    position: relative;
    padding: 0.75rem 1.25rem;
    margin-bottom: 1rem;
    border: 1px solid transparent;
    border-radius: 0.25rem;
}

.alert-success {
    color: #155724;
    background-color: #d4edda;
    border-color: #c3e6cb;
}

.alert-danger {
    color: #721c24;
    background-color: #f8d7da;
    border-color: #f5c6cb;
}"""
        
        with open(self.static_dir / "css" / "bootstrap.min.css", 'w', encoding='utf-8') as f:
            f.write(bootstrap_css)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω bootstrap.min.css")
    
    def _create_fontawesome_css(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Font Awesome CSS"""
        fontawesome_css = """/* Font Awesome Icons */
.fa {
    display: inline-block;
    font-style: normal;
    font-variant: normal;
    text-rendering: auto;
    line-height: 1;
}

.fa-home::before { content: "üè†"; }
.fa-user::before { content: "üë§"; }
.fa-envelope::before { content: "‚úâÔ∏è"; }
.fa-phone::before { content: "üìû"; }
.fa-map-marker::before { content: "üìç"; }
.fa-calendar::before { content: "üìÖ"; }
.fa-clock::before { content: "üïê"; }
.fa-star::before { content: "‚≠ê"; }
.fa-heart::before { content: "‚ù§Ô∏è"; }
.fa-shopping-cart::before { content: "üõí"; }
.fa-search::before { content: "üîç"; }
.fa-bars::before { content: "‚ò∞"; }
.fa-times::before { content: "‚úï"; }
.fa-arrow-right::before { content: "‚Üí"; }
.fa-arrow-left::before { content: "‚Üê"; }
.fa-arrow-up::before { content: "‚Üë"; }
.fa-arrow-down::before { content: "‚Üì"; }"""
        
        with open(self.static_dir / "css" / "fontawesome.min.css", 'w', encoding='utf-8') as f:
            f.write(fontawesome_css)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω fontawesome.min.css")
    
    def _create_custom_components_css(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ CSS –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        custom_css = """/* Custom Components */
.gradient-bg {
    background: linear-gradient(45deg, #667eea, #764ba2);
}

.glass-effect {
    background: rgba(255,255,255,0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255,255,255,0.2);
}

.hover-lift {
    transition: transform 0.3s ease;
}

.hover-lift:hover {
    transform: translateY(-5px);
}

.modern-card {
    background: white;
    border-radius: 15px;
    padding: 25px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    transition: transform 0.3s ease;
}

.modern-card:hover {
    transform: translateY(-5px);
}

.modern-button {
    background: linear-gradient(45deg, #667eea, #764ba2);
    color: white;
    padding: 12px 30px;
    border: none;
    border-radius: 25px;
    font-weight: 600;
    transition: all 0.3s ease;
}

.modern-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(102,126,234,0.4);
}"""
        
        with open(self.static_dir / "css" / "custom-components.css", 'w', encoding='utf-8') as f:
            f.write(custom_css)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω custom-components.css")
    
    def download_images(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        print("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_dir = self.static_dir / "images"
        images_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        placeholders = [
            (800, 600, "Hero Image", "hero.jpg", (74, 144, 226)),
            (400, 300, "Product", "product.jpg", (80, 200, 120)),
            (300, 200, "Service", "service.jpg", (255, 107, 107)),
            (200, 200, "Avatar", "avatar.jpg", (155, 89, 182)),
            (1200, 400, "Banner", "banner.jpg", (52, 152, 219)),
            (600, 400, "Gallery", "gallery.jpg", (230, 126, 34))
        ]
        
        for width, height, text, filename, color in placeholders:
            self.create_placeholder_image(width, height, text, filename, color)
    
    def _create_google_fonts_css(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ CSS —Å Google Fonts"""
        fonts_css = """/* Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

/* Font Variables */
:root {
    --font-primary: 'Roboto', sans-serif;
    --font-secondary: 'Open Sans', sans-serif;
    --font-heading: 'Montserrat', sans-serif;
    --font-modern: 'Poppins', sans-serif;
    --font-clean: 'Inter', sans-serif;
}

/* Font Classes */
.font-primary { font-family: var(--font-primary); }
.font-secondary { font-family: var(--font-secondary); }
.font-heading { font-family: var(--font-heading); }
.font-modern { font-family: var(--font-modern); }
.font-clean { font-family: var(--font-clean); }"""
        
        with open(self.static_dir / "css" / "fonts.css", 'w', encoding='utf-8') as f:
            f.write(fonts_css)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω fonts.css")
    
    def create_template_index(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —à–∞–±–ª–æ–Ω–æ–≤...")
        
        templates = []
        templates_dir = Path("templates/blocks")
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
        for category_dir in templates_dir.iterdir():
            if category_dir.is_dir() and category_dir.name not in ['__pycache__', 'test_exports']:
                for template_dir in category_dir.iterdir():
                    if template_dir.is_dir():
                        template_info = {
                            "id": len(templates) + 1,
                            "name": template_dir.name.replace('_', ' ').title(),
                            "category": category_dir.name,
                            "path": str(template_dir),
                            "files": [f.name for f in template_dir.rglob('*') if f.is_file()]
                        }
                        templates.append(template_info)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
        with open("templates/template_index.json", 'w', encoding='utf-8') as f:
            json.dump({"templates": templates}, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å —Å {len(templates)} —à–∞–±–ª–æ–Ω–∞–º–∏")
    
    def create_resources_list(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        resources = {
            "css_frameworks": [
                "Bootstrap 5.3.0",
                "Tailwind CSS 3.3.0", 
                "Bulma 0.9.4"
            ],
            "icon_libraries": [
                "Font Awesome 6.4.0",
                "Material Icons",
                "Feather Icons"
            ],
            "javascript_libraries": [
                "jQuery 3.7.0",
                "Alpine.js 3.12.0",
                "AOS (Animate On Scroll) 2.3.4"
            ],
            "color_palettes": [
                "Material Design Colors",
                "Tailwind CSS Colors", 
                "Bootstrap Theme Colors"
            ],
            "fonts": [
                "Google Fonts (Roboto, Open Sans, Montserrat, Poppins, Inter)",
                "System Fonts",
                "Custom Web Fonts"
            ],
            "templates": [
                "Business Landing Pages",
                "Portfolio Galleries",
                "E-commerce Stores",
                "Corporate Websites",
                "Blog Platforms",
                "Restaurant Sites",
                "Real Estate Agencies",
                "Medical Centers"
            ]
        }
        
        with open("templates/resources.json", 'w', encoding='utf-8') as f:
            json.dump(resources, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è ProThemesRU...")
    
    downloader = TemplateDownloader()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã
        downloader.download_free_templates()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        downloader.download_ui_components()
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        downloader.download_images()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        downloader.create_template_index()
        downloader.create_resources_list()
        
        print(f"\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {downloader.downloaded_count}")
        print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫–∏:")
        print(f"   - templates/blocks/ (—à–∞–±–ª–æ–Ω—ã)")
        print(f"   - static/ (—Ä–µ—Å—É—Ä—Å—ã)")
        print(f"   - templates/template_index.json (–∏–Ω–¥–µ–∫—Å)")
        print(f"   - templates/resources.json (—Ä–µ—Å—É—Ä—Å—ã)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 